---
interface CarouselItem {
  imgSrc: string;
  imgAlt: string;
  text: string;
}

export interface Props {
  items: CarouselItem[];
  id?: string;
}

const {
  items,
  id = "carousel" + Math.random().toString(36).substring(2, 9),
} = Astro.props;

// número de columnas visibles
const visible = 3;
// clonamos las primeras visible-1 imágenes para el loop
const clones = items.slice(0, visible - 1);
const trackItems = [...items, ...clones];
---

<div id={id} class="relative w-full overflow-hidden ">
  <div
    id={`${id}-track`}
    class="flex transition-transform duration-500 ease-in-out"
  >
    {trackItems.map(item => (
      <div class="w-1/3 flex-shrink-0 px-1">
        <div class="bg-white rounded-lg overflow-hidden">
          <img src={item.imgSrc} alt={item.imgAlt} class="w-full object-cover" />
        </div>
      </div>
    ))}
  </div>
</div>

<script define:vars={{ id, itemsLength: items.length, visible }}>
  document.addEventListener("DOMContentLoaded", () => {
    const track = document.getElementById(`${id}-track`);
    let idx = 0;

    function slide() {
      idx++;
      track.style.transform = `translateX(-${(idx * 100) / visible}%)`;

      // cuando haya corrido todas las originales, resetea sin transición
      if (idx === itemsLength) {
        setTimeout(() => {
          track.classList.remove("transition-transform");
          track.style.transform = `translateX(0)`;
          idx = 0;
          // forzar reflow para volver a activar la transición
          void track.offsetWidth;
          track.classList.add("transition-transform");
        }, 500);
      }
    }

    slide();
    setInterval(slide, 4000);
  });
</script>