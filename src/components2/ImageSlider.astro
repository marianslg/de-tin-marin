---
// You can pass an array of images to this component
interface Props {
  images: {
    src: string;
    alt: string;
    title: string; // Added title field
  }[];
}

const { images } = Astro.props;
---

<div class="relative w-full overflow-hidden">
  <div
    class="flex transition-transform duration-300 ease-in-out"
    id="carouselTrack"
  >
    {
      images.map((image) => (
        <div class="flex-none w-full px-2 box-border md:w-1/3">
          <div class="flex flex-col">
            <img
              src={image.src}
              alt={image.alt}
              class="w-full aspect-[3/4] object-cover rounded"
            />
            <h3 class="mt-2 text-center font-semibold">{image.title}</h3>
          </div>
        </div>
      ))
    }
  </div>

  <div
    class="absolute top-1/2 w-full -translate-y-1/2 flex justify-between z-10 pb-10 px-4"
  >
    <button
      id="prevBtn"
      aria-label="Previous slide"
      class="bg-white bg-opacity-70 hover:bg-opacity-90 rounded-full w-10 h-10 flex items-center justify-center text-lg opacity-0"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M15 18l-6-6 6-6"></path>
      </svg>
    </button>
    <button
      id="nextBtn"
      aria-label="Next slide"
      class="bg-white bg-opacity-70 hover:bg-opacity-90 rounded-full w-10 h-10 flex items-center justify-center text-lg opacity-100"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M9 18l6-6-6-6"></path>
      </svg>
    </button>
  </div>
</div>

<script>
  // Initialize carousel functionality when the component loads
  function initCarousel() {
    const track = document.getElementById("carouselTrack");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");

    if (!track || !prevBtn || !nextBtn) return;

    let currentIndex = 0;
    const items = track.querySelectorAll("div.flex-none");
    const itemCount = items.length;

    // Number of visible items based on screen size
    const getVisibleItems = () => {
      return window.innerWidth >= 768 ? 3 : 1;
    };

    const updateCarousel = () => {
      const visibleItems = getVisibleItems();
      const maxIndex = itemCount - visibleItems;

      // Prevent going beyond the last slide
      if (currentIndex > maxIndex) {
        currentIndex = maxIndex;
      }

      const offset = (currentIndex * -100) / visibleItems;
      track.style.transform = `translateX(${offset}%)`;

      if (currentIndex === 0) {
        prevBtn.classList.add("opacity-0", "pointer-events-none");
        prevBtn.classList.remove("opacity-100");
      } else {
        prevBtn.classList.add("opacity-100");
        prevBtn.classList.remove("opacity-0", "pointer-events-none");
      }

      const maxIndex2 = Math.max(0, itemCount - getVisibleItems());
      if (currentIndex >= maxIndex2) {
        nextBtn.classList.add("opacity-0", "pointer-events-none");
        nextBtn.classList.remove("opacity-100");
      } else {
        nextBtn.classList.add("opacity-100");
        nextBtn.classList.remove("opacity-0", "pointer-events-none");
      }
    };

    prevBtn.addEventListener("click", () => {
      currentIndex = Math.max(currentIndex - 1, 0);
      updateCarousel();
    });

    nextBtn.addEventListener("click", () => {
      const visibleItems = getVisibleItems();
      const maxIndex = Math.max(0, itemCount - visibleItems);
      currentIndex = Math.min(currentIndex + 1, maxIndex);
      updateCarousel();
    });

    // Update on resize for responsive behavior
    window.addEventListener("resize", updateCarousel);

    // Initial position
    updateCarousel();
  }

  // Run initialization when the component is mounted
  document.addEventListener("DOMContentLoaded", initCarousel);

  // For Astro View Transitions support
  document.addEventListener("astro:page-load", initCarousel);
</script>
